const keyMappingEN = {

  'key_tilda' : { isFn: false, isLock: false, eventKey: 'Dead', eventCode: 'Backquote', char: '\`', charShift : '\~', charCaps: '\`' },
  'key_1' : { isFn: false, isLock: false, eventCode: 'Digit1', char: '1', charShift : '!' , charCaps: '1' },
  'key_2' : { isFn: false, isLock: false, eventCode: 'Digit2', char: '2', charShift : '@' , charCaps: '2' },
  'key_3' : { isFn: false, isLock: false, eventCode: 'Digit3', char: '3', charShift : '#' , charCaps: '3' },
  'key_4' : { isFn: false, isLock: false, eventCode: 'Digit4', char: '4', charShift : '$' , charCaps: '4' },
  'key_5' : { isFn: false, isLock: false, eventCode: 'Digit5', char: '5', charShift : '%' , charCaps: '5' },
  'key_6' : { isFn: false, isLock: false, eventCode: 'Digit6', char: '6', charShift : '^' , charCaps: '6' },
  'key_7' : { isFn: false, isLock: false, eventCode: 'Digit7', char: '7', charShift : '&' , charCaps: '7' },
  'key_8' : { isFn: false, isLock: false, eventCode: 'Digit8', char: '8', charShift : '*' , charCaps: '8' },
  'key_9' : { isFn: false, isLock: false, eventCode: 'Digit9', char: '9', charShift : '(' , charCaps: '9' },
  'key_0' : { isFn: false, isLock: false, eventCode: 'Digit0', char: '0', charShift : ')' , charCaps: '0' },
  'key_minus' : { isFn: false, isLock: false, eventCode: 'Minus', char: '-', charShift : '_' , charCaps: '-' },
  'key_equal' : { isFn: false, isLock: false, eventCode: 'Equal', char: '=', charShift : '+', charCaps: '=' },
  'key_backspace' : { isFn: true, isLock: false, eventCode: 'Backspace', eventType : 'removePrev', char: 'Backspace' },

  'key_tab' : { isFn: true, isLock: false, eventCode: 'Tab', eventType : 'insertTab', char: 'TAB', },
  'key_q' : { isFn: false, isLock: false, eventCode: 'KeyQ', char: 'q', charShift : 'Q' , charCaps: 'Q' },
  'key_w' : { isFn: false, isLock: false, eventCode: 'KeyW', char: 'w', charShift : 'W' , charCaps: 'W' },
  'key_e' : { isFn: false, isLock: false, eventCode: 'KeyE', char: 'e', charShift : 'E' , charCaps: 'E' },
  'key_r' : { isFn: false, isLock: false, eventCode: 'KeyR', char: 'r', charShift : 'R' , charCaps: 'R' },
  'key_t' : { isFn: false, isLock: false, eventCode: 'KeyT', char: 't', charShift : 'T' , charCaps: 'T' },
  'key_y' : { isFn: false, isLock: false, eventCode: 'KeyY', char: 'y', charShift : 'Y' , charCaps: 'Y' },
  'key_u' : { isFn: false, isLock: false, eventCode: 'KeyU', char: 'u', charShift : 'U' , charCaps: 'U' },
  'key_i' : { isFn: false, isLock: false, eventCode: 'KeyI', char: 'i', charShift : 'I' , charCaps: 'I' },
  'key_o' : { isFn: false, isLock: false, eventCode: 'KeyO', char: 'o', charShift : 'O' , charCaps: 'O' },
  'key_p' : { isFn: false, isLock: false, eventCode: 'KeyP', char: 'p', charShift : 'P' , charCaps: '' },
  'key_bracket_left' : { isFn: false, isLock: false, eventCode: 'BracketLeft', char: '[', charShift : '{' , charCaps: '[' },
  'key_bracket_right' : { isFn: false, isLock: false, eventCode: 'BracketRight', char: ']', charShift : '}' , charCaps: ']' },
  'key_delete' : { isFn: true, isLock: false, eventCode: 'Delete', eventType: 'removeNext', char: 'DEL' },

  'key_capslock' : { isFn: true, isLock: true, eventCode: 'CapsLock', eventType: 'toggleCaps' , char: 'CapsLock' },
  'key_a' : { isFn: false, isLock: false, eventCode: 'KeyA', char: 'a', charShift : 'A' , charCaps: 'A' },
  'key_s' : { isFn: false, isLock: false, eventCode: 'KeyS', char: 's', charShift : 'S' , charCaps: 'S' },
  'key_d' : { isFn: false, isLock: false, eventCode: 'KeyD', char: 'd', charShift : 'D' , charCaps: 'D' },
  'key_f' : { isFn: false, isLock: false, eventCode: 'KeyF', char: 'f', charShift : 'F' , charCaps: 'F' },
  'key_g' : { isFn: false, isLock: false, eventCode: 'KeyG', char: 'g', charShift : 'G' , charCaps: 'G' },
  'key_h' : { isFn: false, isLock: false, eventCode: 'KeyH', char: 'h', charShift : 'H' , charCaps: 'H' },
  'key_j' : { isFn: false, isLock: false, eventCode: 'KeyJ', char: 'j', charShift : 'J' , charCaps: 'I' },
  'key_k' : { isFn: false, isLock: false, eventCode: 'KeyK', char: 'k', charShift : 'K' , charCaps: 'J' },
  'key_l' : { isFn: false, isLock: false, eventCode: 'KeyL', char: 'l', charShift : 'L' , charCaps: 'K' },
  'key_doubledot' : { isFn: false, isLock: false, eventCode: 'Semicolon', char: ';', charShift : ':' , charCaps: ';' },
  'key_quote' : { isFn: false, isLock: false, eventCode: 'Quote', char: '\'', charShift : '\"' , charCaps: '' },
  'key_enter' : { isFn: true, isLock: false, eventCode: 'Enter', eventType: 'newLine', char: 'Enter' },

  'key_shift_left' : { isFn: true, isLock: true, eventCode: 'ShiftLeft', eventType: 'toggleShift', char: 'L. Shift' },
  'key_backslash' : { isFn: false, isLock: false, eventCode: 'Backslash', char: '\\', charShift : '|' , charCaps: '\\' },
  'key_z' : { isFn: false, isLock: false, eventCode: 'KeyZ', char: 'z', charShift : 'Z' , charCaps: 'Z' },
  'key_x' : { isFn: false, isLock: false, eventCode: 'KeyX', char: 'x', charShift : 'X' , charCaps: 'X' },
  'key_c' : { isFn: false, isLock: false, eventCode: 'KeyC', char: 'c', charShift : 'C' , charCaps: 'C' },
  'key_v' : { isFn: false, isLock: false, eventCode: 'KeyV', char: 'v', charShift : 'V' , charCaps: 'V' },
  'key_b' : { isFn: false, isLock: false, eventCode: 'KeyB', char: 'b', charShift : 'B' , charCaps: 'B' },
  'key_n' : { isFn: false, isLock: false, eventCode: 'KeyN', char: 'n', charShift : 'N' , charCaps: 'N' },
  'key_m' : { isFn: false, isLock: false, eventCode: 'KeyM', char: 'm', charShift : 'M' , charCaps: 'M' },
  'key_comma' : { isFn: false, isLock: false, eventCode: 'Comma', char: ',', charShift : '<' , charCaps: ',' },
  'key_dot' : { isFn: false, isLock: false, eventCode: 'Period', char: '.', charShift : '>' , charCaps: '.' },
  'key_slash' : { isFn: false, isLock: false, eventCode: 'Slash', char: '/', charShift : '?' , charCaps: '/' },
  'key_up' : { isFn: true, isLock: false, eventCode: 'ArrowUp', eventType: 'moveUp' , char: '▲' },
  'key_shift_right' : { isFn: true, isLock: true, eventCode: 'ShiftRight', eventType: 'toggleShift', char: 'R. Shift' },

  'key_ctrl_left' : { isFn: true, isLock: true, eventCode: 'ControlLeft', eventType: 'toggleControl', char: 'Ctrl' },
  'key_win_left' : { isFn: true, isLock: false, eventCode: 'MetaLeft ', eventType: 'toggleWin', char: 'WIN' },
  'key_alt_left' : { isFn: true, isLock: true, eventCode: 'AltLeft', eventType: 'toggleAlt', char: 'Alt' },
  'key_space' : { isFn: false, isLock: false, eventCode: 'Space', eventType: 'moveUp' , char: ' ', charShift : ' ' , charCaps: ' ' },
  'key_alt_right' : { isFn: true, isLock: true, eventCode: 'AltRight', eventType: 'toggleAlt', char: 'Alt' },
  'key_win_right' : { isFn: true, isLock: false, eventCode: 'MetaRight ', eventType: 'toggleWin', char: 'WIN' },
  'key_left' : { isFn: true, isLock: false, eventCode: 'ArrowLeft', eventType: 'movePrev' , char: '◄' },
  'key_down' : { isFn: true, isLock: false, eventCode: 'ArrowDown', eventType: 'moveDown' , char: '▼' },
  'key_left' : { isFn: true, isLock: false, eventCode: 'ArrowRight', eventType: 'moveNext' , char: '►' },
  'key_ctrl_right' : { isFn: true, isLock: true, eventCode: 'ControlRight', eventType: 'toggleControl', char: 'Ctrl' } ,

};



const keyMappingRU = {

  'key_tilda' : { isFn: false, isLock: false, eventKey: 'Dead', eventCode: 'Backquote', char: 'ё', charShift : 'Ё', charCaps: '' },
  'key_1' : { isFn: false, isLock: false, eventCode: 'Digit1', char: '1', charShift : '!', charCaps: '1' },
  'key_2' : { isFn: false, isLock: false, eventCode: 'Digit2', char: '2', charShift : '\"', charCaps: '2' },
  'key_3' : { isFn: false, isLock: false, eventCode: 'Digit3', char: '3', charShift : '№', charCaps: '3' },
  'key_4' : { isFn: false, isLock: false, eventCode: 'Digit4', char: '4', charShift : ';', charCaps: '4' },
  'key_5' : { isFn: false, isLock: false, eventCode: 'Digit5', char: '5', charShift : '%', charCaps: '5' },
  'key_6' : { isFn: false, isLock: false, eventCode: 'Digit6', char: '6', charShift : ':', charCaps: '6' },
  'key_7' : { isFn: false, isLock: false, eventCode: 'Digit7', char: '7', charShift : '?', charCaps: '7' },
  'key_8' : { isFn: false, isLock: false, eventCode: 'Digit8', char: '8', charShift : '*', charCaps: '8' },
  'key_9' : { isFn: false, isLock: false, eventCode: 'Digit9', char: '9', charShift : '(', charCaps: '9' },
  'key_0' : { isFn: false, isLock: false, eventCode: 'Digit0', char: '0', charShift : ')', charCaps: '0' },
  'key_minus' : { isFn: false, isLock: false, eventCode: 'Minus', char: '-', charShift : '_', charCaps: '-' },
  'key_equal' : { isFn: false, isLock: false, eventCode: 'Equal', char: '=', charShift : '+', charCaps: '=' },
  'key_backspace' : { isFn: true, isLock: false, eventCode: 'Backspace', eventType : 'removePrev', char: 'Backspace' },


  'key_tab' : { isFn: true, isLock: false, eventCode: 'Tab', eventType : 'insertTab', char: 'TAB', },
  'key_q' : { isFn: false, isLock: false, eventCode: 'KeyQ', char: 'й', charShift : 'Й', charCaps: 'Й' },
  'key_w' : { isFn: false, isLock: false, eventCode: 'KeyW', char: 'ц', charShift : 'Ц', charCaps: 'Ц' },
  'key_e' : { isFn: false, isLock: false, eventCode: 'KeyE', char: 'у', charShift : 'У', charCaps: 'У' },
  'key_r' : { isFn: false, isLock: false, eventCode: 'KeyR', char: 'к', charShift : 'К', charCaps: 'К' },
  'key_t' : { isFn: false, isLock: false, eventCode: 'KeyT', char: 'е', charShift : 'Е', charCaps: 'Е' },
  'key_y' : { isFn: false, isLock: false, eventCode: 'KeyY', char: 'н', charShift : 'Н', charCaps: 'Н' },
  'key_u' : { isFn: false, isLock: false, eventCode: 'KeyU', char: 'г', charShift : 'Г', charCaps: 'Г' },
  'key_i' : { isFn: false, isLock: false, eventCode: 'KeyI', char: 'ш', charShift : 'Ш', charCaps: 'Ш' },
  'key_o' : { isFn: false, isLock: false, eventCode: 'KeyO', char: 'щ', charShift : 'Щ', charCaps: 'Щ' },
  'key_p' : { isFn: false, isLock: false, eventCode: 'KeyP', char: 'з', charShift : 'З', charCaps: 'З' },
  'key_bracket_left' : { isFn: false, isLock: false, eventCode: 'BracketLeft', char: 'х', charShift : 'Х', charCaps: 'Х' },
  'key_bracket_right' : { isFn: false, isLock: false, eventCode: 'BracketLeft', char: 'ъ', charShift : 'Ъ', charCaps: 'Ъ' },
  'key_delete' : { isFn: true, isLock: false, eventCode: 'Delete', eventType: 'removeNext', char: 'DEL' },


  'key_capslock' : { isFn: true, isLock: true, eventCode: 'CapsLock', eventType: 'toggleCaps', char: 'CapsLock' },
  'key_a' : { isFn: false, isLock: false, eventCode: 'KeyA', char: 'ф', charShift : 'Ф', charCaps: 'Ф' },
  'key_s' : { isFn: false, isLock: false, eventCode: 'KeyS', char: 'ы', charShift : 'Ы', charCaps: 'Ы' },
  'key_d' : { isFn: false, isLock: false, eventCode: 'KeyD', char: 'в', charShift : 'В', charCaps: 'В' },
  'key_f' : { isFn: false, isLock: false, eventCode: 'KeyF', char: 'а', charShift : 'А', charCaps: 'А' },
  'key_g' : { isFn: false, isLock: false, eventCode: 'KeyG', char: 'п', charShift : 'П', charCaps: 'П' },
  'key_h' : { isFn: false, isLock: false, eventCode: 'KeyH', char: 'р', charShift : 'Р', charCaps: 'Р' },
  'key_j' : { isFn: false, isLock: false, eventCode: 'KeyJ', char: 'о', charShift : 'О', charCaps: 'О' },
  'key_k' : { isFn: false, isLock: false, eventCode: 'KeyK', char: 'л', charShift : 'Л', charCaps: 'Л' },
  'key_l' : { isFn: false, isLock: false, eventCode: 'KeyL', char: 'д', charShift : 'Д', charCaps: 'Д' },
  'key_doubledot' : { isFn: false, isLock: false, eventCode: 'Semicolon', char: 'ж', charShift : 'Ж', charCaps: 'Ж' },
  'key_quote' : { isFn: false, isLock: false, eventCode: 'Quote', char: 'э', charShift : 'Э', charCaps: 'Э' },
  'key_enter' : { isFn: true, isLock: false, eventCode: 'Enter', eventType: 'newLine', char: 'Enter' },


  'key_shift_left' : { isFn: true, isLock: true, eventCode: 'ShiftLeft', eventType: 'toggleShift', char: 'L. Shift' },
  'key_backslash' : { isFn: false, isLock: false, eventCode: 'Backslash', char: '\\', charShift : '\/', charCaps: '\\' },
  'key_z' : { isFn: false, isLock: false, eventCode: 'KeyZ', char: 'я', charShift : 'Я', charCaps: 'Я' },
  'key_x' : { isFn: false, isLock: false, eventCode: 'KeyX', char: 'ч', charShift : 'Ч', charCaps: 'Ч' },
  'key_c' : { isFn: false, isLock: false, eventCode: 'KeyC', char: 'с', charShift : 'С', charCaps: 'С' },
  'key_v' : { isFn: false, isLock: false, eventCode: 'KeyV', char: 'м', charShift : 'М', charCaps: 'М' },
  'key_b' : { isFn: false, isLock: false, eventCode: 'KeyB', char: 'и', charShift : 'И', charCaps: 'И' },
  'key_n' : { isFn: false, isLock: false, eventCode: 'KeyN', char: 'т', charShift : 'Т', charCaps: 'Т' },
  'key_m' : { isFn: false, isLock: false, eventCode: 'KeyM', char: 'ь', charShift : 'Ь', charCaps: 'Ь' },
  'key_comma' : { isFn: false, isLock: false, eventCode: 'Comma', char: 'б', charShift : 'Б', charCaps: 'Б' },
  'key_dot' : { isFn: false, isLock: false, eventCode: 'Period', char: 'ю', charShift : 'Ю', charCaps: 'Ю' },
  'key_slash' : { isFn: false, isLock: false, eventCode: 'Slash', char: '.', charShift : ',', charCaps: '.' },
  'key_up' : { isFn: true, isLock: false, eventCode: 'ArrowUp', eventType: 'moveUp' , char: '▲' },
  'key_shift_right' : { isFn: true, isLock: true, eventCode: 'ShiftRight', eventType: 'toggleShift', char: 'R. Shift' },


  'key_ctrl_left' : { isFn: true, isLock: true, eventCode: 'ControlLeft', eventType: 'toggleControl', char: 'Ctrl' },
  'key_win_left' : { isFn: true, isLock: false, eventCode: 'MetaLeft ', eventType: 'toggleWin', char: 'WIN' },
  'key_alt_left' : { isFn: true, isLock: true, eventCode: 'AltLeft', eventType: 'toggleAlt', char: 'Alt' },
  'key_space' : { isFn: false, isLock: false, eventCode: 'Space', eventType: 'moveUp' , char: ' ', charShift : ' ', charCaps : ' ' },
  'key_alt_right' : { isFn: true, isLock: true, eventCode: 'AltRight', eventType: 'toggleAlt', char: 'Alt' },
  'key_win_right' : { isFn: true, isLock: false, eventCode: 'MetaRight ', eventType: 'toggleWin', char: 'WIN' },
  'key_left' : { isFn: true, isLock: false, eventCode: 'ArrowLeft', eventType: 'movePrev' , char: '◄' },
  'key_down' : { isFn: true, isLock: false, eventCode: 'ArrowDown', eventType: 'moveDown' , char: '▼' },
  'key_left' : { isFn: true, isLock: false, eventCode: 'ArrowRight', eventType: 'moveNext' , char: '►' },
  'key_ctrl_right' : { isFn: true, isLock: true, eventCode: 'ControlRight', eventType: 'toggleControl', char: 'Ctrl' } ,

};

export { keyMappingEN as keymapEN } ;
export { keyMappingRU as keymapRU } ;

